;; -*- lisp -*-
;; tell debian's stumpwm launcher to use sbcl
;; debian=sbcl
(in-package :stumpwm)

(mapcar #'load-module '("cpu"
                        "mem"
                        "battery-portable"
                        "net"
                        "wifi"
                        "disk"))

(defconstant *day-names*
  '("Mon" "Tue" "Wed" "Thu" "Fri" "Sat" "Sun"))

(defun current-date ()
  "Returns the date formatted as `2009-11-16 Mon 11:34:03'."
  (multiple-value-bind
      (second minute hour date month year day-of-week dst-p tz)
      (get-decoded-time)
    (format nil "~d-~2,'0d-~2,'0d ~a ^B~2,'0d:~2,'0d:~2,'0d^b"
            year month date (nth day-of-week *day-names*)
            hour minute second)))

(defun dropbox-status ()
  (run-shell-command "dropbox-status" t))

(defun mpc-current ()
  (run-shell-command "mpc-current" t))

(setf *screen-mode-line-format*
      (list
       ;; date
       "^6*" '(:eval (current-date)) ; defined above
       ;; cpu | mem | battery
       " | %D | %c %C (%f) %t | %M | %B | " '(:eval (dropbox-status))
       " | " '(:eval (mpc-current))))

;; how many seconds elapse between each update of the modeline
(setf *mode-line-timeout* 1) ; must be set *before* turning on the modeline

(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))

;; Volume control
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioLowerVolume") "exec volume down")
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioRaiseVolume") "exec volume up")

;; Mute
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioMute") "exec volume mute")

;; Play/Pause
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioPlay") "exec play")
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioPrev") "exec mpc prev")
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioNext") "exec mpc next")

;; width in pixels given to the borders of windows with maxsize or ratio
;; hints
(setf *maxsize-border-width* 1)

;; width in pixels given to the borders of transient or pop-up windows
(setf *transient-border-width* 1)

;; width in pixels given to the borders of regular windows
(setf *normal-border-width* 1)

(defcommand reinit () ()
  "docstring"
  (run-commands "reload" "loadrc"))

(define-key *root-map* (kbd "L") "quit")

(run-shell-command "/usr/bin/keychain -Q -q id_rsa")

(defcommand terminal () ()
  "Start terminal or switch to it, if it is already running."
  (run-or-raise "xfce4-terminal" '(:instance "xfce4-terminal")))

(define-key *top-map* (kbd "s-1") "terminal")

(defcommand emacs () ()  ;! redefining emacs command
  "Start Emacs or switch to it, if it is already running."
  (run-or-raise "emacsclient -c" '(:class "Emacs")))

(define-key *top-map* (kbd "s-2") "emacs")

(defcommand conkeror () ()
  "Start Conkeror or switch to it, if it is already running."
  (run-or-raise "conkeror" '(:class "Conkeror")))

(define-key *top-map* (kbd "s-3") "conkeror")

(defcommand skype () ()
  "Start Skype or switch to it, if it is already running."
  (run-or-raise "skype" '(:class "Skype")))

(define-key *top-map* (kbd "s-4") "skype")

(defcommand pidgin () ()
  "Start Pidgin or switch to it, if it is already running."
  (run-or-raise "pidgin" '(:class "Pidgin")))

(define-key *top-map* (kbd "s-5") "pidgin")
